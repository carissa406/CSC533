orders = spark.read.option("header", "true").csv("/user/data/CSC533DM/instacart/orders.csv")
products = spark.read.option("header", "true").csv("/user/data/CSC533DM/instacart/products.csv")
departments = spark.read.option("header", "true").csv("/user/data/CSC533DM/instacart/departments.csv")
order_products_train = spark.read.option("header", "true").csv("/user/data/CSC533DM/instacart/order_products__train.csv")

departments.createOrReplaceTempView("departments")
order_products_train.createOrReplaceTempView("order_products_train")
orders.createOrReplaceTempView("orders")
products.createOrReplaceTempView("products")

df_orders_dow = spark.sql("""
select count(order_id) as total_orders,
(case
when order_dow = '0' then 'Sunday'
when order_dow = '1' then 'Monday'
when order_dow = '2' then 'Tuesday'
when order_dow = '3' then 'Wednesday'
when order_dow = '4' then 'Thursday'
when order_dow = '5' then 'Friday'
when order_dow = '6' then 'Saturday'
end) as day_of_week
from orders
group by order_dow
order by total_orders desc
""")

df_orders_hour = spark.sql("""
select count(order_id) as total_orders, order_hour_of_day as hour
 from orders
group by order_hour_of_day
order by order_hour_of_day
""")

df_orders_shelf = spark.sql("""
select d.department, count(distinct p.product_id) as products
 from products p
 inner join departments d
 on d.department_id = p.department_id
group by d.department
order by products desc
limit 10
""")

from pyspark.sql.functions import collect_set, col, count
rawData = spark.sql("select p.product_name, o.order_id from products p inner join order_products_train o where o.product_id = p.product_id")
baskets = rawData.groupBy('order_id').agg(collect_set('product_name').alias('items'))
baskets.createOrReplaceTempView('baskets')

baskets.show(2, truncate=False)



from pyspark.ml.fpm import FPGrowth
from pyspark.sql.functions import col, split
fpGrowth = FPGrowth(itemsCol="items", minSupport=0.001, minConfidence=0)
model = fpGrowth.fit(baskets)

model.freqItemsets.show(15, truncate=False)

mostPopularItemInABasket = model.freqItemsets
mostPopularItemInABasket.createOrReplaceTempView('mostPopularItemInABasket')

mostPopularItemInABasket_2 = spark.sql("""
select items, freq from mostPopularItemInABasket where size(items) > 2 order by
freq desc limit 20
""")

ifThen = model.associationRules
ifThen.createOrReplaceTempView("ifThen")
ifThen.select("antecedent", "consequent", "confidence").show(10, truncate=False)


assocRules = spark.sql("""
select antecedent `as antecedent (if)`, consequent as `consequent (then)`, confidence
from ifThen 
order by confidence desc 
limit 20
""")